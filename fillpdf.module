<?php
// $Id$
 
/**
 * @file
 * Allows mappings of PDFs to site content
 */

//define("DEFAULT_SERVLET_URL", "http://localhost:3000/fillpdf");
define("DEFAULT_SERVLET_URL", "http://fillpdf-grails.ocdevel.com/fillpdf");
module_load_include('inc', 'fillpdf', 'fillpdf.admin');

/**
 * Implementation of hook_help().
 */
function fillpdf_help($path, $arg) {
  switch ($path) {
    case 'admin/help#fillpdf':
      return '<p>After setting up your PDF-to-node mapping & you want to download the PDF, 
    you need to navigate to /fillpdf?fid=10&nid=10
      where fid is the form id of the form you\'ve just created, and nid is the node 
    id whose content you\'ll be pulling via tokens.  You can obtain fid from the URL 
    when editing your form.  It will look like: http://localhost/admin/content/fillpdf/form/FID/...</p>';
    case 'admin/content/fillpdf':
      if (module_exists('help')) {
        return t('See the !link for an explaination on dowloading these forms to PDF',
          array('!link' => l(t('Documentation'), 'admin/help/fillpdf')));
      }
      else {
        return t('Activate the help module if you need an '.
          'explanation on downloading these forms to PDF.');
      }
  }
}


/**
 * Implementation of hook_menu().
 */
function fillpdf_menu() {
    $access = array('administer pdfs');
    $items = array();

    $items['fillpdf'] = array( // fillpdf?fid=10&nid=20
      'page callback' => 'fillpdf_generate_pdf',
      'access callback' => 'fillpdf_generate_pdf_access',
    );
    
    // ------- Config ---------------------------
    $items['admin/settings/fillpdf'] = array(
      'title' => 'Fill PDF Settings',
      'description' => 'Configure Fill PDF Servelet Information',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_settings'),
      'access arguments' => $access
    );

    // --------- Form ------------------------
    $items['admin/content/fillpdf'] = array(
      'title' => 'Fill PDF',
      'description' => 'Manage your PDFs',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_forms'),
      'access arguments' => $access
    );
    $items['admin/content/fillpdf/%'] = array(
      'title' => 'Edit PDF Form',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_form_edit', 3),
      'access arguments' => $access,
    );
    $items['admin/content/fillpdf/%/delete'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_form_delete_confirm', 3),
      'access arguments' => $access,
      'type' => MENU_CALLBACK
    );  
  //}else if (is_numeric(arg(4))) {
    
    // --------- Fields ------------------------
    $items['admin/content/fillpdf/%/add'] = array(
      'title' => 'Add field',
      'page callback' => 'fillpdf_field',
      'page arguments' => array(4, 3),
      'access arguments' => $access,
      'type' => MENU_LOCAL_TASK
    );
    $items['admin/content/fillpdf/%/edit/%'] = array(
      'page callback' => 'fillpdf_field',
      'page arguments' => array(4, 3, 5),
      'access arguments' => $access,
      'type' => MENU_CALLBACK
    );
    $items['admin/content/fillpdf/%/delete/%'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_field_delete_confirm', 3, 5),
      'access arguments' => $access,
      'type' => MENU_CALLBACK
    );
  //}
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function fillpdf_perm() {
  return array('administer pdfs', 'publish own pdfs', 'publish all pdfs');
}

function fillpdf_generate_pdf_access() {
  global $user;
  $node = node_load($_GET['nid']);
  return user_access('administer pdfs') ||
         user_access('publish all pdfs') ||
         (user_access('publish own pdfs') && ($node->uid == $user->uid));
}


function fillpdf_theme(){
  $theme = array(
  	'fillpdf_fields_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
  return $theme;
}

/**
 * This function generates the form fields from the specified PDF.  It (1) sends a request to the iText
 * servlet to parse the specified PDF, (2) iText returns an XML response with fields-mappings, this module
 * parses the XML response & contsructs the fields.
 */
function _fillpdf_generate_fields_from_pdf($fid) {
  
	$form_url=db_result(db_query("SELECT url FROM {fillpdf_forms} WHERE fid=%d", $fid));
	if ($fp = fopen($form_url, 'r')) {
	   $content = '';
	   // keep reading until there's nothing left
	   while ($line = fread($fp, 1024)) {
	      $content .= $line;
	   }
   }	
  
//  $servlet_url = variable_get('fillpdf_servlet_url', DEFAULT_SERVLET_URL);
  $servlet_url = DEFAULT_SERVLET_URL;
  $api_key = variable_get('fillpdf_api_key', '0');
  $result = _fillpdf_xmlrpc_request($servlet_url, 'parsePdf', $content, $api_key);
  if($result->error == true)
    drupal_goto("admin/content/fillpdf/form/{$fid}/list"); //after setting error message  
  $xml = simplexml_load_string( $result->data );
    
  //create fields
  $i=1;
  $weight=-10;  
  foreach ($xml->field as $field) {    
    $field_type='';
    switch ($field['type']) {
      case "List":
      case "Combobox":
      case "Radiobutton":
      case "Checkbox":
          $field_type='select'; break;
          
      case "None":
      case "Pushbutton":
      case "?":
          //return;
      
      case "Text":
      case "Signature":
      default: 
          $field_type='textfield'; break;
    }
    
//    $new_field->label = $new_field->pdf_key = $field['name'];  
//    $new_field->type=$field_type;
//    $fields[]=$new_field;

//	$field['name']=(string)$field['name']; //d6 seems to have required this... 
    $field_name=(string)$field['name'];
    if ($field_name) {
      if (!(db_result(db_query("SELECT 1 FROM {fillpdf_fields} WHERE fid=%d AND pdf_key='%s'", $fid, $field_name)))) {
        db_query("INSERT INTO {fillpdf_fields} (fid, pdf_key, label) VALUES(%d, '%s', '%s')",
          $fid, $field_name, $field_name);  
      }
    }
    $i++;
  }  
}

/**
 * Generates the PDF ouput based on field values 
 * It (1) constructs the XFDF from the form's fields, (2) saves the XFDF to /files/xfdf/x.xfdf, 
 * (3) redirects to the servlet at SERVLET_URL which downloads this XFDF, merges it with the 
 * user-specified PDF, and returns the output.  The SERVLET_URL construct is SERVLET_URL?fid=10&nid=10
 * where fid is this form's id and nid is the node id from which data will be pulled via tokens.
 */
function fillpdf_generate_pdf() {
    $fid = $_GET['fid'];
    $nid = $_GET['nid'];  
    $sample = $_GET['sample'];
    
	
    if (is_null($fid)) return;
    $fillpdf_info = db_fetch_object(db_query("SELECT title, url FROM {fillpdf_forms} WHERE fid=%d", $fid));
    
    //just give them empty pdf if no nid
    if (!$nid && !$sample) {
      //@@TODO: bug here, blank screen
      header("Location: /".$fillpdf_info->url);
      exit;
    }
        
    $host = 'http://'. $_SERVER['SERVER_NAME'];
    $node = node_load($nid);
    $fields = array();
    $query = db_query("SELECT * FROM {fillpdf_fields} WHERE fid=%d", $fid);
    while ($obj = db_fetch_object($query)) {
      if($sample == 'true')
        $fields[$obj->pdf_key] = $obj->pdf_key;
      else{
        $str = token_replace($obj->value, $type = 'node', $object = $node);
        $str = preg_replace('|<br />|', '
', $str);
        $fields[$obj->pdf_key] = $str;
      }
    }  
        
    // get the XFDF file contents  
    include_once(drupal_get_path('module', 'fillpdf') .'/xfdf.inc');
    $xfdf_data = createXFDF($fillpdf_info->url, $fields);
    $download_name = preg_replace('/[^a-zA-Z0-9_]/', '', $fillpdf_info->title) .'.pdf';
    //$download_name = preg_match('|\/[^\/].*$|',$fillpdf_info->url);
    
    if ($fp = fopen($fillpdf_info->url, 'r')) {
	   $pdf_data = '';
	   // keep reading until there's nothing left
	   while ($line = fread($fp, 1024)) {
	      $pdf_data .= $line;
	   }
   }	 

//    $servlet_url = variable_get('fillpdf_servlet_url', DEFAULT_SERVLET_URL);
    $servlet_url = DEFAULT_SERVLET_URL;
    $api_key = variable_get('fillpdf_api_key', '0');
    $result = _fillpdf_xmlrpc_request($servlet_url, 'mergePdf', $pdf_data, $xfdf_data, $api_key);
    if($result->error == true)
      drupal_goto("<front>"); //after setting error message  
    
    // Log this, could be useful
  	watchdog('fillpdf', 'User %user has generated form %form for node %node.', array(
  	  '%user' => $GLOBALS['user']->name,
  	  '%form' => $fillpdf_info->title,
  	  '%node' => $node->title,
   	));
      
    header('Content-type:application/pdf');
    header('Content-disposition:attachment; filename="'.$download_name.'"');	
    echo $result->data;
  	exit;
}

function _fillpdf_xmlrpc_request($url, $method){
  $args = func_get_args();
  $count = count($args);
  for ($i = 2; $i < $count; $i++) // don't encode $url & $method
      $args[$i] = base64_encode($args[$i]);
  
  $result = call_user_func_array('xmlrpc', $args);
  $ret = new stdClass;
  if($result == 'auth_error'){
    drupal_set_message('Authentication failed.  To use the hosted Fill PDF server, you must <a href="http://fillpdf.ocdevel.com">register for a key</a>.  (see <a href="/admin/settings/fillpdf">/admin/settings/fillpdf</a>)', 'error');
    $ret->error = true;
  }
  elseif($result == false){
    drupal_set_message('There was a problem contacting the Fill PDF service.  It maybe be down, or you may not have internet access.', 'error');
    $ret->error = true;
  }
  else{
    $ret->data = base64_decode($result);
    $ret->error = false;
  }  
  return $ret;
}
