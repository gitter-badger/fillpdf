<?php
// $Id$
 
/**
 * @file
 * Allows mappings of PDFs to site content
 */

//define("DEFAULT_SERVLET_URL", "http://localhost:3000/fillpdf");
define("DEFAULT_SERVLET_URL", "http://fillpdf-service.com/fillpdf");
module_load_include('inc', 'fillpdf', 'fillpdf.admin');
//@@TODO refactor this, will post the webform_tokens module on D.O
if(module_exists('webform'))
  module_load_include('inc', 'fillpdf', 'webform_tokens');

/**
 * Implementation of hook_help().
 */
function fillpdf_help($path, $arg) {
  switch ($path) {
    case 'admin/help#fillpdf':
      return '<p>After setting up your PDF-to-node mapping & you want to download the PDF, 
    you need to navigate to /fillpdf?fid=10&nid=10
      where fid is the form id of the form you\'ve just created, and nid is the node 
    id whose content you\'ll be pulling via tokens.  You can obtain fid from the URL 
    when editing your form.</p>';
    case 'admin/content/fillpdf':
      if (module_exists('help')) {
        return t('See the !link for an explaination on dowloading these forms to PDF',
          array('!link' => l(t('Documentation'), 'admin/help/fillpdf')));
      }
      else {
        return t('Activate the help module if you need an '.
          'explanation on downloading these forms to PDF.');
      }
  }
}


/**
 * Implementation of hook_menu().
 */
function fillpdf_menu() {
    $access = array('administer pdfs');
    $items = array();

    $items['fillpdf'] = array( // fillpdf?fid=10&nid=20
      'page callback' => 'fillpdf_generate_pdf',
      'access callback' => 'fillpdf_generate_pdf_access',
    );
    
    // ------- Config ---------------------------
    $items['admin/settings/fillpdf'] = array(
      'title' => 'Fill PDF Settings',
      'description' => 'Configure Fill PDF Servelet Information',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_settings'),
      'access arguments' => $access
    );

    // --------- Form ------------------------
    $items['admin/content/fillpdf'] = array(
      'title' => 'Fill PDF',
      'description' => 'Manage your PDFs',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_forms'),
      'access arguments' => $access
    );
    $items['admin/content/fillpdf/%'] = array(
      'title' => 'Edit PDF Form',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_form_edit', 3),
      'access arguments' => $access,
    );
    $items['admin/content/fillpdf/%/delete'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_form_delete_confirm', 3),
      'access arguments' => $access,
      'type' => MENU_CALLBACK
    );  
  //}else if (is_numeric(arg(4))) {
    
    // --------- Fields ------------------------
    $items['admin/content/fillpdf/%/add'] = array(
      'title' => 'Add field',
      'page callback' => 'fillpdf_field',
      'page arguments' => array(4, 3),
      'access arguments' => $access,
      'type' => MENU_LOCAL_TASK
    );
    $items['admin/content/fillpdf/%/edit/%'] = array(
      'page callback' => 'fillpdf_field',
      'page arguments' => array(4, 3, 5),
      'access arguments' => $access,
      'type' => MENU_CALLBACK
    );
    $items['admin/content/fillpdf/%/delete/%'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_field_delete_confirm', 3, 5),
      'access arguments' => $access,
      'type' => MENU_CALLBACK
    );
  //}
  return $items;
}


/**
 * Implementation of hook_theme
 */
function fillpdf_theme(){
  $theme = array(
  	'fillpdf_fields_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
  return $theme;
}

/**
 * implementation of hook_block 
 */
function fillpdf_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      for ($i = 0; $i < 10; $i++)
        $blocks[$i]['info'] = 'FillPDF ' . $i;
      return $blocks;
    case 'configure':
      $form['forms'] = array(
        '#type' => 'checkboxes',
        '#title' => t('FillPDF forms'),
        '#default_value' => variable_get("fillpdf_forms_$delta", array()),
      );
      $result = db_query(
        "SELECT fid, title ".
        "FROM {fillpdf_forms} "
	  );
      while ($form_rec = db_fetch_object($result))
        $form['forms']['#options'][$form_rec->fid + 1] = $form_rec->title;
      $form['nid'] = array(
        '#type' => 'textarea',
        '#title' => t('Code to return node nid'),
        '#default_value' => variable_get("fillpdf_nid_$delta", ''),
        '#description' => t('Enter PHP code between %php. Note that executing incorrect PHP-code can break your Drupal site.', array('%php' => '<?php ?>')),
      ); 
      return $form;
    case 'save':
      variable_set("fillpdf_forms_$delta", $edit['forms']);
      variable_set("fillpdf_nid_$delta", $edit['nid']);
      break;
    case 'view':
      $nid = drupal_eval(variable_get("fillpdf_nid_$delta", ''));
      foreach (variable_get("fillpdf_forms_$delta", array()) as $fid)
        if ($fid) {
          $fid--;
          $form = db_fetch_object(db_query("SELECT title FROM {fillpdf_forms} WHERE fid = %d", $fid));
          $links[] = l(
	          $form->title,
	          "fillpdf",
	          array('query' => array(
	            'fid' => $fid,
	            'nid' => $nid, 
	          ))
	        );
        }

      $block['content'] = theme('item_list', $links);
      return $block;
  }
}


/**
 * This function generates the form fields from the specified PDF.  It (1) sends a request to the iText
 * servlet to parse the specified PDF, (2) iText returns an XML response with fields-mappings, this module
 * parses the XML response & contsructs the fields.
 */
function _fillpdf_generate_fields_from_pdf($fid) {
  $filename = db_result(db_query("SELECT url FROM {fillpdf_forms} WHERE fid=%d", $fid));
  $handle = fopen($filename, "r");
  $content = fread($handle, filesize($filename));
  fclose($handle);
  
  $fillpdf_remote_service= variable_get('fillpdf_remote_service', true);
  
  // use fillpdf-service.com's xmlrpc service (must be registered)
  if($fillpdf_remote_service){
    $servlet_url = DEFAULT_SERVLET_URL;
		$api_key = variable_get('fillpdf_api_key', '0');
		$result = _fillpdf_xmlrpc_request($servlet_url, 'parse_pdf', base64_encode($content), $api_key);
		if($result->error == true)
		  drupal_goto("admin/content/fillpdf"); //after setting error message  
		$data = $result->data;
  }
  
	// use local php/java bridge (must have Tomcat & JavaBridge installed on VPS or dedicated
  else{
    $require = drupal_get_path('module', 'fillpdf').'/lib/JavaBridge/java/Java.inc';
	  require_once($require);
	  $fillpdf = new java('com.ocdevel.FillpdfService', base64_encode($content), 'bytes');
    //TODO: use parse() & work with fields, instead of parse_as_xfdf working with xml
    $data = java_values($fillpdf->parse_as_xfdf());	
  }

  $xml = simplexml_load_string( $data );
    
  //create fields
  $i=1;
  $weight=-10;  
  foreach ($xml->field as $field) {    
    $field_type='';
    switch ($field['type']) {
      case "List":
      case "Combobox":
      case "Radiobutton":
      case "Checkbox":
          $field_type='select'; break;
          
      case "None":
      case "Pushbutton":
      case "?":
          //return;
      
      case "Text":
      case "Signature":
      default: 
          $field_type='textfield'; break;
    }
    
//    $new_field->label = $new_field->pdf_key = $field['name'];  
//    $new_field->type=$field_type;
//    $fields[]=$new_field;

//	$field['name']=(string)$field['name']; //d6 seems to have required this... 
    $field_name=(string)$field['name'];
    if ($field_name) {
      if (!(db_result(db_query("SELECT 1 FROM {fillpdf_fields} WHERE fid=%d AND pdf_key='%s'", $fid, $field_name)))) {
        db_query("INSERT INTO {fillpdf_fields} (fid, pdf_key, label) VALUES(%d, '%s', '%s')",
          $fid, $field_name, $field_name);  
      }
    }
    $i++;
  }  
}

/**
 * Get the data and form that need to be merged, from the $_GET (alternatively you can call
 * fillpdf_generate_pdf($get) with a manually-constructed array
 * @return an array that looks like:
 * 	array( 'nodes' => array($node1, $node2, ...),
 * 			'webforms' => array( array($node3, $submission1), array( ...), ...) );
 */
function _fillpdf_get_request_data(){
    //this function called multiple times, cut down on DB calls
    static $get;
    if($get)
      return $get;
      
    $get = array( 
    	'sample'=> $_GET['sample'], // is this just the PDF populated with sample data? 
    	'fid'=> $_GET['fid'],
    	'nodes'=>array(), 
    	'webforms'=>array());
    
    $nids = $webforms = array();
    if( $_GET['nid'] || $_GET['nids'] )
      $nids = ( $_GET['nid'] ? array($_GET['nid']) : $_GET['nids'] ); 
    if( $_GET['webform'] || $_GET['webforms'] )
      $webforms = ( $_GET['webform'] ? array($_GET['webform']) : $_GET['webforms'] ); 
  
    // Nodes
    foreach($nids as $nid)
      $get['nodes'][] = node_load($nid);
    // Webforms
    if(module_exists('webform')){
      module_load_include('inc', 'webform', 'webform_submissions');
      foreach($webforms as $webform){
        if(!$webform['sid']){ // user didn't specify submission-id, meaning they want most recent
          $webform['sid'] = db_result(db_query('select sid from {webform_submissions} 
          	where nid=%d and uid=%d order by submitted desc', $webform['nid'], $user->uid));
        }
        $get['webforms'][] = array( 
          'webform' => node_load($webform['nid']),
          'submission' => webform_get_submission($webform['nid'], $webform['sid']) );
      }
    }
    return $get;
}

/**
 * Make sure the user has access to data they want to populate the PDF 
 */
function fillpdf_generate_pdf_access() {
  if( user_access('administer pdfs') || user_access('publish all pdfs') )
    return true;
  if(!user_access('publish own pdfs'))
    return false;
    
  // they can publish only their own, so now make sure it's theirs
  $get = _fillpdf_get_request_data();
  
  // own node?
  foreach($get['nodes'] as $node)
    if( !(node_access('view', $node)) )
      return false;
        
  // own webform?
  if(!(empty($get['webforms']))) {
    global $user;
    if (!($user->uid && (user_access('access own webform submissions') || user_access('access webform results') || user_access('access webform submissions'))))
      return false;
    foreach($get['webforms'] as $webform){
      if( !(webform_submission_access($webform['webform'], $webform['submission'], 'view')) )
        return false; 
    }
  }
  
  return true;
}

/**
 * Implementation of hook_perm().
 */
function fillpdf_perm() {
  return array('administer pdfs', 'publish own pdfs', 'publish all pdfs');
}

/**
 * Generates the PDF ouput based on field values 
 * It (1) constructs the XFDF from the form's fields, (2) saves the XFDF to /files/xfdf/x.xfdf, 
 * (3) redirects to the servlet at SERVLET_URL which downloads this XFDF, merges it with the 
 * user-specified PDF, and returns the output.  The SERVLET_URL construct is SERVLET_URL?fid=10&nid=10
 * where fid is this form's id and nid is the node id from which data will be pulled via tokens.
 */

/**
 * 
 * @param array $get: If not provided, comes from url (fillpdf?fid=1&nid=10), else array looks like
 * array( 'nodes' => array($node1, $node2, ...),
 * 			'webforms' => array( array($node3, $submission1), array( ...), ...) );
 * @return doesn't return anything, actually constructs a page from scratch (pdf content-type)
 */
function fillpdf_generate_pdf($get = array()) {
    // example.com/fillpdf?fid=1&nids[]=2&webform[nid]=3&webform[sid]=1
    $get = ( empty($get) ? _fillpdf_get_request_data() : $get );
    $fid = $get['fid'];
    // form_id, required
    if(is_null($fid))
      drupal_goto();
    global $user;
    $sample = $get['sample'];
    $nodes = $get['nodes'];
    $webforms = $get['webforms'];
    $fillpdf_info = db_fetch_object(db_query("SELECT title, url FROM {fillpdf_forms} WHERE fid=%d", $fid));
    
    //just give them empty pdf they only requested fid
    if (!empty($nodes) && !empty($webforms) && !is_null($sample)) {
      $host = 'http://'. $_SERVER['SERVER_NAME'];
      header("Location: ".$host.'/'.$fillpdf_info->url);
      exit;
    }
      
    
    $fields = array();
    $query = db_query("SELECT * FROM {fillpdf_fields} WHERE fid=%d", $fid);
    while ($obj = db_fetch_object($query)) {
      
      // Fill a sample PDF & return
      if($sample == 'true')
        $fields[$obj->pdf_key] = $obj->pdf_key;
      else{
        
        // multiple nids, #516840
        // we want the last nid in $_GET to override previous ones (aka, of fillpdf?nids[]=1&nids=2, 2 wins)
        $nodes = array_reverse($nodes); 
        $webforms = array_reverse($webforms); 
        
        
        // --- node token replacements
        if(!empty($nodes)){
          foreach($nodes as $node){
            $token = token_replace($obj->value, $type = 'node', $object = $node);
            if($token)
              break;
          }
          
          // if they're populating with an imagefield
          //@@TODO: check if an image (not another pdf or some-such)_
          if(strstr($obj->value, 'filefield-fid]')){
            module_load_include('inc', 'filefield', 'field_file');
            $filefield = field_file_load($token);
            
            $handle = fopen($filefield['filepath'], "r");
            $file_bytes = fread($handle, filesize($filefield['filepath']));
            fclose($handle);
            
            $str = base64_encode($file_bytes);
            $fields[$obj->pdf_key] = '{image}'.$str;
          }else{
            $str = preg_replace('|<br />|', '
', $token);
            $fields[$obj->pdf_key] = $str;
          }
        }
        // /--- node token replacements ---
        
        // --- webform token replacements
        if(!empty($webforms)){
          foreach($webforms as $webform){
//            $submission = node_load($submission->nid);
            $token = token_replace($obj->value, $type = 'webform', $webform['submission']);
            if($token)
              break;
          }
          $str = preg_replace('|<br />|', '
', $token);
          $fields[$obj->pdf_key] = $str;
        }
        // /--- webform token replacements ---
        
        
      }
    }
      
    $download_name = preg_replace('/[^a-zA-Z0-9_]/', '', $fillpdf_info->title) .'.pdf';
    //$download_name = preg_match('|\/[^\/].*$|',$fillpdf_info->url);
    
    $handle = fopen($fillpdf_info->url, "r");
    $pdf_data = fread($handle, filesize($fillpdf_info->url));
    fclose($handle);
    
    $fillpdf_remote_service= variable_get('fillpdf_remote_service', TRUE);
  
	  // use fillpdf-service.com's xmlrpc service (must be registered)
	  if($fillpdf_remote_service){
	    $servlet_url = DEFAULT_SERVLET_URL;
	    $api_key = variable_get('fillpdf_api_key', '0');
	    $result = _fillpdf_xmlrpc_request($servlet_url, 'merge_pdf', base64_encode($pdf_data), $fields, $api_key);
	    if($result->error == true)
	      drupal_goto("<front>"); //after setting error message
	    $data = $result->data;
	  }
	  
	  // use local php/java bridge (must have Tomcat & JavaBridge installed on VPS or dedicated
	  else{
	    $require = drupal_get_path('module', 'fillpdf').'/lib/JavaBridge/java/Java.inc';
	    require_once($require);
	    $fillpdf = new java('com.ocdevel.FillpdfService', base64_encode($pdf_data), 'bytes');
	    foreach($fields as $key=>$field){
	     $fillpdf->text($key, $field);  
	    }
	    $data = java_values($fillpdf->toString());
	  }
    
    // Log this, could be useful
  	watchdog('fillpdf', 'User %user has generated form %form for node %node.', array(
  	  '%user' => $user->name,
  	  '%form' => $fillpdf_info->title,
  	  '%node' => $node->title,
   	));
      
    header('Content-type:application/pdf');
    header('Content-disposition:attachment; filename="'.$download_name.'"');
    echo $data;	
  	exit;
}

function _fillpdf_xmlrpc_request($url, $method){
  $args = func_get_args();
  $result = call_user_func_array('xmlrpc', $args);
  $ret = new stdClass;
  if(isset($result['error'])){
    drupal_set_message($result['error'], 'error');
    $ret->error = true;
  }
  elseif($result == false){
    drupal_set_message('There was a problem contacting the Fill PDF service.  It maybe be down, or you may not have internet access.', 'error');
    $ret->error = true;
  }
  else{
    $ret->data = base64_decode($result['data']);
    $ret->error = false;
  }  
  return $ret;
}
