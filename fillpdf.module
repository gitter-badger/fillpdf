<?php
// $Id$
 
/**
 * @file
 * Allows mappings of PDFs to site content
 */

define("DEFAULT_SERVLET_URL", "http://fillpdf-service.com/xmlrpc.php");
module_load_include('inc', 'fillpdf', 'fillpdf.admin');

if(module_exists('webform')) //@@TODO refactor this, will post the webform_tokens module on D.O
  module_load_include('inc', 'fillpdf', 'webform_tokens');

/**
 * Implementation of hook_help().
 */
function fillpdf_help($path, $arg) {
  switch ($path) {
    case 'admin/help#fillpdf':
    	$content = _fillpdf_get_file_contents(drupal_get_path('module', 'fillpdf').'/README.txt');
    	$content = '<pre>'.check_plain($content).'</pre>';
      return $content;
    case 'admin/content/fillpdf':
      if (module_exists('help')) {
        return t('See the !link for an explaination on dowloading these forms to PDF',
          array('!link' => l(t('Documentation'), 'admin/help/fillpdf')));
      }
      else {
        return t('Activate the help module if you need an '.
          'explanation on downloading these forms to PDF.');
      }
  }
}


/**
 * Implementation of hook_menu().
 */
function fillpdf_menu() {
    $access = array('administer pdfs');
    $items = array();

    // fillpdf&fid=10&nids[]=1&webforms[0][nid]=2&webforms[0][sid]=3
    $items['fillpdf'] = array( 
      'page callback' => 'fillpdf_parse_uri',
    // Can't use access callback.  We need the arguments, but they're passed as $GET.  Will access-check in fillpdf_merge_pdf
    'access arguments' => array('access content'), 
    );
    
    // ------- Config ---------------------------
    $items['admin/settings/fillpdf'] = array(
      'title' => 'Fill PDF Settings',
      'description' => 'Configure Fill PDF Servelet Information',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_settings'),
      'access arguments' => $access
    );

    // --------- Form ------------------------
    $items['admin/content/fillpdf'] = array(
      'title' => 'Fill PDF',
      'description' => 'Manage your PDFs',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_forms'),
      'access arguments' => $access
    );
    $items['admin/content/fillpdf/%'] = array(
      'title' => 'Edit PDF Form',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_form_edit', 3),
      'access arguments' => $access,
    );
    $items['admin/content/fillpdf/%/delete'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_form_delete_confirm', 3),
      'access arguments' => $access,
      'type' => MENU_CALLBACK
    );  
  //}else if (is_numeric(arg(4))) {
    
    // --------- Fields ------------------------
    $items['admin/content/fillpdf/%/add'] = array(
      'title' => 'Add field',
      'page callback' => 'fillpdf_field',
      'page arguments' => array(4, 3),
      'access arguments' => $access,
      'type' => MENU_LOCAL_TASK
    );
    $items['admin/content/fillpdf/%/edit/%'] = array(
      'page callback' => 'fillpdf_field',
      'page arguments' => array(4, 3, 5),
      'access arguments' => $access,
      'type' => MENU_CALLBACK
    );
    $items['admin/content/fillpdf/%/delete/%'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fillpdf_field_delete_confirm', 3, 5),
      'access arguments' => $access,
      'type' => MENU_CALLBACK
    );
  //}
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function fillpdf_perm() {
  return array('administer pdfs', 'publish own pdfs', 'publish all pdfs');
}


/**
 * Gets a link to the prinable PDF, merged with the passed-in data
 * @param array/int $nids or $nid, if you pass in one value it will merge with that node.  
 *  If array, it will merge with multiple nodes, with later nids overriding previous ones. 
 * @param array $webforms Array of webforms, of this strucure: array('nid'=>1, 'sid'=>1) 
 * @param bool $sample True if you want to populate the form with its own field-names (to get a gist of PDF)
 */
function fillpdf_pdf_link($fid, $nids = null, $webform_arr = null, $sample = false){
	
	if(is_array($nids)){
		$nids_uri = '&nids[]=' .implode('&nids[]=', $nids);
	}elseif (isset($nids)){
	  $nids_uri = "&nids[]={$nids}";
	}
	
	if(is_array($webform_arr)){
		if($webform_arr['nid']) // didn't pass in as array(array('nid','sid'))
		  $webform_arr = array($webform_arr);
		foreach($webform_arr as $key => $webform)
		  $webforms_uri .= "&webforms[{$key}][nid]={$webform['nid']}"; 
		  $webforms_uri .= $webform['sid'] ? "&webforms[{$key}][sid]={$webform['sid']}" : "";
	}
	$sample = $sample ? '&sample=true' : '';
	
	return url('', array('absolute'=>true))."fillpdf&fid={$fid}{$nids_uri}{$webforms_uri}{$sample}";
}



/**
 * Get the data and form that need to be merged, from the $_GET, and print the PDF
 * @seealso fillpdf_pdf_link for $_GET params 
 */
function fillpdf_parse_uri(){
    //this function called multiple times, cut down on DB calls
//    static $get;if($get)return $get;
    $sample = $_GET['sample']; // is this just the PDF populated with sample data? 
    $fid = $_GET['fid'];
    $nids = $webforms = array();
    if( $_GET['nid'] || $_GET['nids'] )
      $nids = ( $_GET['nid'] ? array($_GET['nid']) : $_GET['nids'] ); 
    if( $_GET['webform'] || $_GET['webforms'] )
      $webforms = ( $_GET['webform'] ? array($_GET['webform']) : $_GET['webforms'] ); 
  
    fillpdf_merge_pdf($fid, $nids, $webforms, $sample);
}


/**
 * Documentation stub
 * @return doesn't return anything, actually constructs a page from scratch (pdf content-type)
 * @seealso fillpdf_pdf_link for $_GET params 
 */
function fillpdf_merge_pdf($fid, $nids = null, $webform_arr = null, $sample) {
  // Case 1: No $fid
	if(is_null($fid)){
  	drupal_set_message('Fillpdf Form ID required to print a PDF', 'warning');
  	drupal_goto();
  }
  
  $fillpdf_info = db_fetch_object(db_query("SELECT title, url FROM {fillpdf_forms} WHERE fid=%d", $fid));
  // Case 2: Only $fid -- just give them empty pdf
  if (!empty($nodes) && !empty($webforms) && !is_null($sample)) {
    $host = url('', array('absolute'=>true));
    header("Location: ".$host.'/'.$fillpdf_info->url);
    exit;
  }
    
	global $user;
  
	$nodes = $webforms = array();
  // Nodes
  if(is_array($nids)){
    foreach($nids as $nid)
      $nodes[] = node_load($nid);
  }
  // Webforms
  if(module_exists('webform') && is_array($webform_arr)){
    module_load_include('inc', 'webform', 'webform_submissions');
    foreach($webform_arr as $webform){
      if(!$webform['sid']){ // user didn't specify submission-id, meaning they want most recent
        $webform['sid'] = db_result(db_query('select sid from {webform_submissions} 
          where nid=%d and uid=%d order by submitted desc', $webform['nid'], $user->uid));
      }
      $webforms[] = array( 
        'webform' => node_load($webform['nid']),
        'submission' => webform_get_submission($webform['nid'], $webform['sid']) );
    }
  }
  
  if(!fillpdf_merge_pdf_access($nodes, $webforms))
    drupal_access_denied();
    
  $fields = array();
  $query = db_query("SELECT * FROM {fillpdf_fields} WHERE fid=%d", $fid);
  while ($obj = db_fetch_object($query)) {
    // Fill a sample PDF & return
    if($sample == 'true')
      $fields[$obj->pdf_key] = $obj->pdf_key;
    else{
      // multiple nids, #516840
      // we want the last nid in $_GET to override previous ones (aka, of fillpdf?nids[]=1&nids[]=2, 2 wins)
      $nodes = array_reverse($nodes); 
      $webforms = array_reverse($webforms); 
        
      // --- node token replacements
      if(!empty($nodes)){
        foreach($nodes as $node){
          $token = token_replace($obj->value, $type = 'node', $object = $node);
          if($token)
            break;
      }
      // if they're populating with an imagefield
      //@@TODO: check if an image (not another pdf or some-such)_
      if(strstr($obj->value, 'filefield-fid]')){
        module_load_include('inc', 'filefield', 'field_file');
        $filefield = field_file_load($token);
        $file_bytes = _fillpdf_get_file_contents($filefield['filepath']);
        $str = base64_encode($file_bytes);
        $fields[$obj->pdf_key] = '{image}'.$str;
      }else{
        $str = preg_replace('|<br />|', '
', $token);
        $fields[$obj->pdf_key] = $str;
       }
     }
     // /--- node token replacements ---
        
     // --- webform token replacements
     if(!empty($webforms)){
       foreach($webforms as $webform){
//            $submission = node_load($submission->nid);
         $token = token_replace($obj->value, $type = 'webform', $webform['submission']);
           if($token)
              break;
         }
         $str = preg_replace('|<br />|', '
', $token);
         $fields[$obj->pdf_key] = $str;
       }
       // /--- webform token replacements ---
        
        
      }
    }
      
    $download_name = preg_replace('/[^a-zA-Z0-9_]/', '', $fillpdf_info->title) .'.pdf';
    //$download_name = preg_match('|\/[^\/].*$|',$fillpdf_info->url);
    $pdf_data = _fillpdf_get_file_contents($fillpdf_info->url, "<front>");
    $fillpdf_remote_service= variable_get('fillpdf_remote_service', TRUE);
    // use fillpdf-service.com's xmlrpc service (must be registered)
    if($fillpdf_remote_service){
      $api_key = variable_get('fillpdf_api_key', '0');
      $result = _fillpdf_xmlrpc_request(DEFAULT_SERVLET_URL, 'merge_pdf', base64_encode($pdf_data), $fields, $api_key);
      if($result->error == true)
        drupal_goto(); //after setting error message
      $data = $result->data;
    }
    
    // use local php/java bridge (must have Tomcat & JavaBridge installed on VPS or dedicated
    else{
      $require = drupal_get_path('module', 'fillpdf').'/lib/JavaBridge/java/Java.inc';
      require_once($require);
      try{
        $fillpdf = new java('com.ocdevel.FillpdfService', base64_encode($pdf_data), 'bytes');
        foreach($fields as $key=>$field){
         $fillpdf->text($key, $field);  
        }
      }catch(JavaException $e){
        drupal_set_message(java_truncate((string)$e), 'error');
        drupal_goto(); //after setting error message
      }
      $data = java_values(base64_decode($fillpdf->toByteArray()));
    }
    
    // Log this, could be useful
    watchdog('fillpdf', 'User %user has generated form %form for node %node.', array(
      '%user' => $user->name,
      '%form' => $fillpdf_info->title,
      '%node' => $node->title,
    ));
      
    header('Content-type:application/pdf');
    header('Content-disposition:attachment; filename="'.$download_name.'"');
    echo $data; 
    exit;
}

/**
 * Make sure the user has access to data they want to populate the PDF 
 */
function fillpdf_merge_pdf_access($nodes = array(), $webforms = array()) {
  if( user_access('administer pdfs') || user_access('publish all pdfs') )
    return true;
  if(!user_access('publish own pdfs'))
    return false;
    
  // own node?
  foreach($nodes as $node)
    if( !(node_access('view', $node)) )
      return false;
        
  // own webform?
  if(!(empty($webforms))) {
    global $user;
    if (!($user->uid && (user_access('access own webform submissions') || user_access('access webform results') || user_access('access webform submissions'))))
      return false;
    foreach($webforms as $webform){
      if( !(webform_submission_access($webform['webform'], $webform['submission'], 'view')) )
        return false; 
    }
  }
  
  return true;
}

/**
 * This function generates the form fields from the specified PDF.  It (1) sends a request to the iText
 * servlet to parse the specified PDF, (2) iText returns an XML response with fields-mappings, this module
 * parses the XML response & contsructs the fields.
 */
function fillpdf_parse_pdf($fid) {
  $filename = db_result(db_query("SELECT url FROM {fillpdf_forms} WHERE fid=%d", $fid));
  $content = _fillpdf_get_file_contents($filename);
  
  $fillpdf_remote_service= variable_get('fillpdf_remote_service', true);
  
  // use fillpdf-service.com's xmlrpc service (must be registered)
  if($fillpdf_remote_service){
		$api_key = variable_get('fillpdf_api_key', '0');
		$result = _fillpdf_xmlrpc_request(DEFAULT_SERVLET_URL, 'parse_pdf', base64_encode($content), $api_key);
		if($result->error == true)
		  drupal_goto("admin/content/fillpdf"); //after setting error message  
		$data = $result->data;
  }
  
	// use local php/java bridge (must have Tomcat & JavaBridge installed on VPS or dedicated
  else{
    $require = drupal_get_path('module', 'fillpdf').'/lib/JavaBridge/java/Java.inc';
	  require_once($require);
	  try{
	    //TODO: use parse() & work with fields, instead of parse_as_xfdf working with xml
		  $fillpdf = new java('com.ocdevel.FillpdfService', base64_encode($content), 'bytes');
	  }catch(JavaException $e){
      drupal_set_message(java_truncate((string)$e), 'error');
      drupal_goto("admin/content/fillpdf"); //after setting error message
    }
    $data = java_values($fillpdf->parse_as_xfdf());
  }

  $xml = simplexml_load_string( $data );
    
  //create fields
  $i=1;
  $weight=-10;  
  foreach ($xml->field as $field) {    
    $field_type='';
    switch ($field['type']) {
      case "List":
      case "Combobox":
      case "Radiobutton":
      case "Checkbox":
          $field_type='select'; break;
          
      case "None":
      case "Pushbutton":
      case "?":
          //return;
      
      case "Text":
      case "Signature":
      default: 
          $field_type='textfield'; break;
    }
    
//    $new_field->label = $new_field->pdf_key = $field['name'];  
//    $new_field->type=$field_type;
//    $fields[]=$new_field;

//	$field['name']=(string)$field['name']; //d6 seems to have required this... 
    $field_name=(string)$field['name'];
    if ($field_name) {
      if (!(db_result(db_query("SELECT 1 FROM {fillpdf_fields} WHERE fid=%d AND pdf_key='%s'", $fid, $field_name)))) {
        db_query("INSERT INTO {fillpdf_fields} (fid, pdf_key, label) VALUES(%d, '%s', '%s')",
          $fid, $field_name, $field_name);  
      }
    }
    $i++;
  }  
}

function _fillpdf_get_file_contents($filepath, $error_goto = null){
  if($error_goto && !(file_exists($filepath))){
    drupal_set_message("{$filepath} does not exist.  Check your 
      filesystem settings, as well as http://drupal.org/node/764936", 'error');
    drupal_goto($error_goto);
  }
	$handle = fopen($filepath, "r");
  $content = fread($handle, filesize($filepath));
  fclose($handle);
  return $content;
}

function _fillpdf_xmlrpc_request($url, $method){
  $args = func_get_args();
  $result = call_user_func_array('xmlrpc', $args);
  $ret = new stdClass;
  if(isset($result['error'])){
    drupal_set_message($result['error'], 'error');
    $ret->error = true;
  }
  else if ($result==false || xmlrpc_error()) {
      $error = xmlrpc_error();
      $ret->error = true;
      drupal_set_message("There was a problem contacting the Fill PDF service.  
        It maybe be down, or you may not have internet access.  [ERROR {$error->code}: {$error->message}]", 'error');
  }
  else{
    $ret->data = base64_decode($result['data']);
    $ret->error = false;
  }  
  return $ret;
}
