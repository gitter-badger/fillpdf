diff --git a/fillpdf.admin.inc b/fillpdf.admin.inc
index 405b5fe..381985a 100644
--- a/fillpdf.admin.inc
+++ b/fillpdf.admin.inc
@@ -5,6 +5,16 @@
  * Allows mappings of PDFs to site content
  */
 
+define('FILLPDF_REPLACEMENTS_DESCRIPTION', t("<p>Tokens, such as those from CCK, sometimes output values that need additional
+  processing prior to being sent to the PDF. A common example is when a key within a CCK <em>Allowed values</em>
+  configuration does not match the field name or option value in the PDF that you would like to be selected but you
+  do not want to change the <em>Allowed values</em> key.</p><p>This field will replace any matching values with the
+  replacements you specify. Specify <strong>one replacement per line</strong> in the format
+  <em>original value|replacement value</em>. For example, <em>yes|Y</em> will fill the PDF with
+  <strong><em>Y</em></strong> anywhere that <strong><em>yes</em></strong> would have originally
+  been used. <p>Note that omitting the <em>replacement value</em> will replace <em>original value</em>
+  with a blank, essentially erasing it.</p>"));
+
 /* ---------------- Configuration --------------------*/
 
 /**
@@ -225,7 +235,13 @@ function fillpdf_form_edit(&$form_state, $fid) {
     '#value' => "Form ID: [$fid].  Populate this form with node IDs, such as /fillpdf?fid=$fid&nid=10<br/>",
   );
   
-  $form['destination_path'] = array(
+  $form['extra'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Additional PDF settings'),
+    '#collapsible' => TRUE,
+    '#collapsed' => ($pdf_form->destination_path || $pdf_form->replacements ? FALSE : TRUE),
+  );
+  $form['extra']['destination_path'] = array(
     '#type' => 'textfield',
     '#title' => t('Custom path for generated PDFs'),
     '#description' => t("<p>By default, filled PDFs are not saved to disk; they are simply sent
@@ -244,16 +260,24 @@ function fillpdf_form_edit(&$form_state, $fid) {
     '#default_value' => $pdf_form->destination_path,
   );
 
-  $form['tokens_fieldset'] = array(
+  $form['extra']['tokens_fieldset'] = array(
     '#type' => 'fieldset',
     '#title' => 'Replacement patterns',
     '#collapsible' => TRUE,
     '#collapsed' => TRUE,
   );
-  $form['tokens_fieldset']['tokens'] = array(
+  $form['extra']['tokens_fieldset']['tokens'] = array(
     '#value' => theme('token_help', array('node', 'webform')),
   );
 
+  $form['extra']['replacements'] = array(
+    '#type' => 'textarea',
+    '#title' => t('Transform filled PDF field values'),
+    '#wysiwyg' => FALSE,
+    '#description' => FILLPDF_REPLACEMENTS_DESCRIPTION,
+    '#default_value' => $pdf_form->replacements,
+  );
+
   $form['submit'] = array('#type' => 'submit',
       '#value' => t('Submit'),
    );
@@ -264,12 +288,13 @@ function fillpdf_form_edit(&$form_state, $fid) {
   
   // @@TODO: order by weight, and add dragable ala http://www.computerminds.co.uk/quick-guide-using-drupal-add-tabledrag-and-enjoying-jquery-drag-and-drop-loveliness
   $q = db_query('SELECT * FROM {fillpdf_fields} WHERE fid = %d', $fid);
-  $header = array(t('Label'), t('PDF-field key'), t('Value'), array('data' => t('Operations'), 'colspan' => 2) );
+  $header = array(t('Label'), t('PDF-field key'), t('Value'), t('Transformed'), array('data' => t('Operations'), 'colspan' => 2) );
   while($field = db_fetch_object($q)){
     $row = array(
     	check_plain($field->label), //editable
     	check_plain($field->pdf_key),
     	$field->value, //editable, expandable
+      ($field->replacements ? 'Yes' : 'No'),
     	l(t('Edit'), "admin/content/fillpdf/$fid/edit/{$field->pdf_key}"),
     	l(t('Delete'), "admin/content/fillpdf/$fid/delete/{$field->pdf_key}"),
     	);
@@ -292,8 +317,8 @@ function fillpdf_form_edit_submit($form, &$form_state) {
     $form_state['redirect'] = "admin/content/fillpdf/{$form['#pdf_form']->fid}/delete" ;
     return;
   }else{
-    db_query('UPDATE {fillpdf_forms} SET title = "%s", destination_path = "%s" WHERE fid = %d',
-             $form_state['values']['title'], trim($form_state['values']['destination_path']), $form['#pdf_form']->fid);
+    db_query('UPDATE {fillpdf_forms} SET title = "%s", destination_path = "%s", replacements = "%s" WHERE fid = %d',
+             $form_state['values']['title'], trim($form_state['values']['destination_path']), $form_state['values']['replacements'], $form['#pdf_form']->fid);
     $form_state['redirect'] = "admin/content/fillpdf/{$form['#pdf_form']->fid}";
     drupal_set_message('Successfully updated form');
     //$form_state['nid'] = $node->nid;
@@ -352,7 +377,8 @@ function fillpdf_form_export($pdf_form) {
   while ($field = db_fetch_object($fields)) {
     $export_array[$field->pdf_key] = array(
       'label' => $field->label, 
-      'value' => $field->value
+      'value' => $field->value,
+      'replacements' => $field->replacements,
     );
   }
   $fillpdf_code = fillpdf_form_export_encode($export_array);
@@ -569,6 +595,21 @@ function fillpdf_field_edit(&$form_state, $pdf_form, $field) {
     '#value' => theme('token_help', array('node', 'webform')),
   );
 
+  $form['extra'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Transform values on this field'),
+    '#collapsible' => TRUE,
+    '#collapsed' => ($field->replacements ? FALSE : TRUE),
+    '#weight' => 6,
+  );
+
+  $form['extra']['replacements'] = array(
+    '#type' => 'textarea',
+    '#wysiwyg' => FALSE,
+    '#description' => FILLPDF_REPLACEMENTS_DESCRIPTION,
+    '#default_value' => $field->replacements,
+  );
+
   $form['submit'] = array(
     '#type' => 'submit',
     '#value' => t('Submit'),
@@ -609,8 +650,8 @@ function fillpdf_field_edit_submit($form, &$form_state) {
   else {
     //add a new field
     $edit_field = (object)$form_state['values'];
-    db_query("INSERT INTO {fillpdf_fields} (fid, label, pdf_key, value) VALUES(%d, '%s', '%s', '%s')", 
-      $form['#pdf_form']->fid, $form_state['values']['label'], $form_state['values']['pdf_key'], $form_state['values']['value']);
+    db_query("INSERT INTO {fillpdf_fields} (fid, label, pdf_key, value, replacements) VALUES(%d, '%s', '%s', '%s', '%s')",
+      $form['#pdf_form']->fid, $form_state['values']['label'], $form_state['values']['pdf_key'], $form_state['values']['value'], $form_state['values']['replacements']);
   }
   $form_state['redirect'] = 'admin/content/fillpdf/'. $form['#pdf_form']->fid;
 }
@@ -650,7 +691,7 @@ function fillpdf_field_delete_confirm_submit($form, &$form_state) {
  */
 function fillpdf_update_field(&$pdf_form, &$field, $old_key) {
   db_query("UPDATE {fillpdf_fields} SET label = '%s', pdf_key='%s', 
-           value = '%s' WHERE fid = %d AND pdf_key = '%s'",
-           $field->label, $field->pdf_key, $field->value, 
+           value = '%s', replacements='%s' WHERE fid = %d AND pdf_key = '%s'",
+           $field->label, $field->pdf_key, $field->value, $field->replacements,
            $pdf_form->fid, $old_key);
 }
diff --git a/fillpdf.install b/fillpdf.install
index dbd8e19..ec64fe0 100644
--- a/fillpdf.install
+++ b/fillpdf.install
@@ -15,6 +15,7 @@ function fillpdf_schema() {
       'title' =>   array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
       'url' =>  array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
       'destination_path' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE),
+      'replacements' => array('type' => 'text', 'size' => 'normal', 'not null' => FALSE),
     ),
     'primary key' => array('fid')
   );
@@ -25,6 +26,7 @@ function fillpdf_schema() {
       'pdf_key' =>  array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
       'label' =>    array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
       'value' =>    array('type' => 'text', 'size' => 'medium', 'not null' => TRUE),
+      'replacements' => array('type' => 'text', 'size' => 'normal', 'not null' => FALSE),
     ),
     'primary key' => array('fid', 'pdf_key')
   );
@@ -45,6 +47,16 @@ function fillpdf_update_6001() {
   return $ret;
 }
 
+/**
+ * Add the replacements field to {fillpdf_forms} and {fillpdf_fields}.
+ */
+function fillpdf_update_6002() {
+  $ret = array();
+  db_add_field($ret, 'fillpdf_forms', 'replacements', array('type' => 'text', 'size' => 'normal', 'not null' => FALSE));
+  db_add_field($ret, 'fillpdf_fields', 'replacements', array('type' => 'text', 'size' => 'normal', 'not null' => FALSE));
+  return $ret;
+}
+
 function fillpdf_uninstall() {
   drupal_uninstall_schema('fillpdf');
 }
diff --git a/fillpdf.module b/fillpdf.module
index b201764..edc51d1 100644
--- a/fillpdf.module
+++ b/fillpdf.module
@@ -187,7 +187,8 @@ function fillpdf_merge_pdf($fid, $nids = null, $webform_arr = null, $sample = nu
   	drupal_goto();
   }
   
-  $fillpdf_info = db_fetch_object(db_query("SELECT title, url, destination_path FROM {fillpdf_forms} WHERE fid=%d", $fid));
+  $fillpdf_info = db_fetch_object(db_query("SELECT title, url, destination_path, replacements FROM {fillpdf_forms} WHERE fid=%d", $fid));
+  $fillpdf_info->replacements = _fillpdf_replacements_to_array($fillpdf_info->replacements);
   // Case 2: Only $fid -- just give them empty pdf
   if (!empty($nodes) && !empty($webforms) && !is_null($sample)) {
     $host = url('', array('absolute'=>true));
@@ -238,137 +239,144 @@ function fillpdf_merge_pdf($fid, $nids = null, $webform_arr = null, $sample = nu
   $fields = $token_objects = array();
   $query = db_query("SELECT * FROM {fillpdf_fields} WHERE fid=%d", $fid);
   while ($obj = db_fetch_object($query)) {
+    $obj->replacements = _fillpdf_replacements_to_array($obj->replacements);
+    // Keep track of whether we're dealing with an image or not
+    $transform_string = FALSE;
     // Fill a sample PDF & return
-    if($sample == 'true') {
+    if ($sample == 'true') {
       $fields[$obj->pdf_key] = $obj->pdf_key;
       // If sampling, return to the form edit page
       $_REQUEST['destination'] = "admin/content/fillpdf/$fid";
     }
-    else{
+    else {
       // multiple nids, #516840
       // we want the last nid in $_GET to override previous ones (aka, of fillpdf?nids[]=1&nids[]=2, 2 wins)
       $nodes = array_reverse($nodes); 
       $webforms = array_reverse($webforms); 
-        
+
       // --- node token replacements
-      if(!empty($nodes)){
-        foreach($nodes as $node){
+      if (!empty($nodes)) {
+        foreach ($nodes as $node) {
           $token = token_replace($obj->value, $type = 'node', $object = $node);
-          if($token)
+          if ($token) {
             $token_objects['node'] = $node;
             break;
+          }
+        }
+        $transform_string = TRUE;
       }
       // if they're populating with an imagefield
       //@@TODO: check if an image (not another pdf or some-such)_
-      if(strstr($obj->value, 'filefield-fid]')){
+      if (strstr($obj->value, 'filefield-fid]')) {
         module_load_include('inc', 'filefield', 'field_file');
         $filefield = field_file_load($token);
         $file_bytes = _fillpdf_get_file_contents($filefield['filepath']);
         $str = base64_encode($file_bytes);
+        $transform_string = FALSE;
         $fields[$obj->pdf_key] = '{image}'.$str;
-      }else{
+      }
+      else {
+      }
+      // /--- node token replacements ---
+
+      // --- webform token replacements
+      if (!empty($webforms)) {
+        foreach ($webforms as $webform) {
+          $token = token_replace($obj->value, $type = 'webform', $webform['submission']);
+          if ($token) {
+            $token_objects['webform'] = $webform['submission'];
+            break;
+          }
+        }
+        $transform_string = TRUE;
+      }
+      // /--- webform token replacements ---
+      if ($transform_string) {
+        // Replace <br /> occurrences with newlines
         $str = preg_replace('|<br />|', '
 ', $token);
+        $str = _fillpdf_transform_field_value($str, $fillpdf_info->replacements, $obj->replacements);
         $fields[$obj->pdf_key] = $str;
-       }
-     }
-     // /--- node token replacements ---
-        
-     // --- webform token replacements
-     if(!empty($webforms)){
-       foreach($webforms as $webform){
-//            $submission = node_load($submission->nid);
-         $token = token_replace($obj->value, $type = 'webform', $webform['submission']);
-           if($token)
-             $token_objects['webform'] = $webform['submission'];
-              break;
-         }
-         $str = preg_replace('|<br />|', '
-', $token);
-         $fields[$obj->pdf_key] = $str;
-       }
-       // /--- webform token replacements ---
-        
-        
       }
     }
-      
-    $output_name = preg_replace('/[^a-zA-Z0-9_]/', '', $fillpdf_info->title) .'.pdf';
-    $pdf_data = _fillpdf_get_file_contents($fillpdf_info->url, "<front>");
-
-    $fillpdf_remote_service= variable_get('fillpdf_remote_service', TRUE);
-    $fillpdf_local_service = variable_get('fillpdf_local_service', TRUE);
-    // use fillpdf-service.com's xmlrpc service (must be registered)
-    if($fillpdf_remote_service){
-      $api_key = variable_get('fillpdf_api_key', '0');
-      $result = _fillpdf_xmlrpc_request(DEFAULT_SERVLET_URL, 'merge_pdf', base64_encode($pdf_data), $fields, $api_key);
-      if($result->error == true)
-        drupal_goto(); //after setting error message
-      $data = base64_decode($result->data);
-    }
-    
-    // use local php/java bridge (must have Tomcat & JavaBridge installed on VPS or dedicated
-    elseif ($fillpdf_local_service) {
-      $require = drupal_get_path('module', 'fillpdf').'/lib/JavaBridge/java/Java.inc';
-      require_once($require);
-      try{
-        $fillpdf = new java('com.ocdevel.FillpdfService', base64_encode($pdf_data), 'bytes');
-        foreach($fields as $key=>$field){
-         $fillpdf->text($key, $field);  
-        }
-      }catch(JavaException $e){
-        drupal_set_message(java_truncate((string)$e), 'error');
-        drupal_goto(); //after setting error message
+  }
+
+  $output_name = preg_replace('/[^a-zA-Z0-9_]/', '', $fillpdf_info->title) .'.pdf';
+  $pdf_data = _fillpdf_get_file_contents($fillpdf_info->url, "<front>");
+
+  $fillpdf_remote_service= variable_get('fillpdf_remote_service', TRUE);
+  $fillpdf_local_service = variable_get('fillpdf_local_service', TRUE);
+  // use fillpdf-service.com's xmlrpc service (must be registered)
+  if($fillpdf_remote_service){
+    $api_key = variable_get('fillpdf_api_key', '0');
+    $result = _fillpdf_xmlrpc_request(DEFAULT_SERVLET_URL, 'merge_pdf', base64_encode($pdf_data), $fields, $api_key);
+    if($result->error == true)
+      drupal_goto(); //after setting error message
+    $data = base64_decode($result->data);
+  }
+
+  // use local php/java bridge (must have Tomcat & JavaBridge installed on VPS or dedicated
+  elseif ($fillpdf_local_service) {
+    $require = drupal_get_path('module', 'fillpdf').'/lib/JavaBridge/java/Java.inc';
+    require_once($require);
+    try {
+      $fillpdf = new java('com.ocdevel.FillpdfService', base64_encode($pdf_data), 'bytes');
+      foreach($fields as $key=>$field){
+        $fillpdf->text($key, $field);
       }
-      $data = java_values(base64_decode($fillpdf->toByteArray()));
     }
+    catch (JavaException $e) {
+      drupal_set_message(java_truncate((string)$e), 'error');
+      drupal_goto(); //after setting error message
+    }
+    $data = java_values(base64_decode($fillpdf->toByteArray()));
+  }
 
-    // Use PDFTK to merge the two
+  // Use PDFTK to merge the two
+  else {
+    $data = fillpdf_execute_merge('pdftk', $fields, $fillpdf_info);
+  }
+
+  // Log this, could be useful
+  watchdog('fillpdf', 'User %user has generated form %form for node %node.', array(
+    '%user' => $user->name,
+    '%form' => $fillpdf_info->title,
+    '%node' => $node->title,
+  ));
+
+  if (!empty($fillpdf_info->destination_path)) {
+    $destination_path = _fillpdf_process_destination_path($fillpdf_info->destination_path, $token_objects);
+    $path_exists = file_check_directory($destination_path, FILE_CREATE_DIRECTORY);
+    if ($path_exists === FALSE) {
+      watchdog('fillpdf', "The path %destination_path does not exist and could not be
+        automatically created. Therefore, the previous submission was not saved. If
+        the URL contained download=1, then the PDF was still sent to the user's browser.
+        If the destination path looks wrong and you have used tokens, check that you have
+        used the correct token and that it is available to Fill PDF at the time of PDF
+        generation.", array('%destination_path' => $destination_path));
+    }
     else {
-      $data = fillpdf_execute_merge('pdftk', $fields, $fillpdf_info);
+      // Full steam ahead!
+      file_save_data($data, $destination_path . "/$output_name", FILE_EXISTS_RENAME);
     }
-    
-    // Log this, could be useful
-    watchdog('fillpdf', 'User %user has generated form %form for node %node.', array(
-      '%user' => $user->name,
-      '%form' => $fillpdf_info->title,
-      '%node' => $node->title,
-    ));
-
-    if (!empty($fillpdf_info->destination_path)) {
-      $destination_path = _fillpdf_process_destination_path($fillpdf_info->destination_path, $token_objects);
-      $path_exists = file_check_directory($destination_path, FILE_CREATE_DIRECTORY);
-      if ($path_exists === FALSE) {
-        watchdog('fillpdf', "The path %destination_path does not exist and could not be
-          automatically created. Therefore, the previous submission was not saved. If
-          the URL contained download=1, then the PDF was still sent to the user's browser.
-          If the destination path looks wrong and you have used tokens, check that you have
-          used the correct token and that it is available to Fill PDF at the time of PDF
-          generation.",
-          array('%destination_path' => $destination_path));
-      }
-      else {
-        // Full steam ahead!
-        file_save_data($data, $destination_path . "/$output_name", FILE_EXISTS_RENAME);
-      }
-      if ($force_download === FALSE) {
-        // Allow the "destination" query string parameter to be used
-        // e.g. fillpdf?nid=1&fid=1&destination=node/1
-        // If no destination is provided, drupal_goto() will send the
-        // user to the front page.
-        drupal_goto();
-      }
+    if ($force_download === FALSE) {
+      // Allow the "destination" query string parameter to be used
+      // e.g. fillpdf?nid=1&fid=1&destination=node/1
+      // If no destination is provided, drupal_goto() will send the
+      // user to the front page.
+      drupal_goto();
     }
+  }
 
-    drupal_set_header('Pragma: public');
-    drupal_set_header('Expires: 0');
-    drupal_set_header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
-    drupal_set_header('Content-type:application/pdf');
-    drupal_set_header('Content-Length: ' , strlen($data));
-    drupal_set_header('Content-disposition:attachment; filename="'.$output_name.'"');
-    drupal_set_header('Content-Transfer-Encoding: binary');
-    echo $data; 
-    exit;
+  drupal_set_header('Pragma: public');
+  drupal_set_header('Expires: 0');
+  drupal_set_header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
+  drupal_set_header('Content-type:application/pdf');
+  drupal_set_header('Content-Length: ' , strlen($data));
+  drupal_set_header('Content-disposition:attachment; filename="'.$output_name.'"');
+  drupal_set_header('Content-Transfer-Encoding: binary');
+  echo $data;
+  exit;
 }
 
 /**
@@ -622,3 +630,38 @@ function _fillpdf_process_destination_path($destination_path, $token_objects) {
   return $destination_path;
 }
 
+function _fillpdf_replacements_to_array($replacements) {
+  $standardized_replacements = str_replace(array("\r\n", "\r"), "\n", $replacements);
+  $lines = explode("\n", $standardized_replacements);
+  $return = array();
+  foreach ($lines as $replacement) {
+    if (!empty($replacement)) {
+      $split = explode('|', $replacement);
+      $return[$split[0]] = preg_replace('|<br />|', '
+', $split[1]);
+    }
+  }
+  return $return;
+}
+
+/**
+ * Apply any field value transformations defined via the UI.
+ * Note that the replacement arguments need to already have been run through
+ *   _fillpdf_replacements_to_array().
+ * @see _fillpdf_replacements_to_array().
+ */
+function _fillpdf_transform_field_value($value, $pdf_replacements, $field_replacements) {
+  if (empty($pdf_replacements) && empty($field_replacements)) {
+    return $value;
+  }
+  elseif (!empty($field_replacements) && isset($field_replacements[$value])) {
+    return $field_replacements[$value];
+  }
+  elseif (!empty($pdf_replacements) && isset($pdf_replacements[$value])) {
+    return $pdf_replacements[$value];
+  }
+  else {
+    return $value;
+  }
+}
+
